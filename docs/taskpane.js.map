{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://vertretungsanalyse-addin/./src/services/openai-service.js","webpack://vertretungsanalyse-addin/./src/helpers/utilities.js","webpack://vertretungsanalyse-addin/./src/taskpane/taskpane.js"],"sourcesContent":["/*\r\n * Service for interacting with the OpenAI API\r\n */\r\n\r\n/**\r\n * Calls the OpenAI API to analyze an email\r\n * @param {string} emailContent - The email content to analyze\r\n * @param {string} apiKey - The OpenAI API key\r\n * @returns {Promise<string>} - The analysis result\r\n */\r\nexport async function analyzeEmailWithOpenAI(emailContent, apiKey) {\r\n  try {\r\n    // In a production environment, this API call should be made through a secure backend service\r\n    // to protect the API key and handle rate limiting, error handling, etc.\r\n    \r\n    // For demonstration purposes, we're showing how the API call might be structured\r\n    // but in a real implementation, this should be handled by a server-side component\r\n    \r\n    // Check for network connectivity before making the API call\r\n    if (!navigator.onLine) {\r\n      throw new Error(\"No internet connection. Please check your network and try again.\");\r\n    }\r\n    \r\n    // Add timeout to the fetch request to prevent hanging\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\r\n    \r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4o-mini', // or another appropriate model\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: `Du bist ein Assistent, der Lehrermails analysiert und strukturierte Regelungsvorschläge für die Schulsoftware UNTIS erstellt.`\r\n            },\r\n            {\r\n              role: 'user',\r\n              content: `Analysiere den folgenden E-Mail-Text und gib eine kompakte Zusammenfassung im folgenden Format aus:\r\n\r\n---\r\nFORMAT DER AUSGABE:\r\n<Lehrkraft-Kürzel>: <Typ> <Datum> <ggf. Uhrzeit/Zeitraum> – <Kurzregelung oder Maßnahmen>\r\n---\r\n\r\n**Regeln und Hinweise:**\r\n- Verwende das Lehrer:innen-Kürzel nach dem Schema: Erste 4 Buchstaben des Nachnamens + 1. Buchstabe des Vornamens (z. B. Clausen = ClauD), beachte Ausnahmen wie PeMar, PetMa, VosAn.\r\n- Mögliche Typen: *krank*, *Raumbuchung*, *Fortbildung*, *Vertretungsregelung*\r\n- Kürze auf das Wesentliche, formuliere aber klar und verständlich.\r\n- Bei Raumbuchungen: Gib den Raum an und die Startzeit (z. B. „ab 8:15\")\r\n- Bei Krankheit/Fortbildung: Gib Zeitraum an und vorhandene Vertretungsregelungen.\r\n- Verwende keine persönlichen Anreden oder E-Mail-Form.\r\n- Ergänze immer auch den Wochentag als Kürzel zu jedem Datum.\r\n- Küchenräume (R115, R118, R015, R018) dürfen nur von SievJ, PeteM, GellR, HantJ genutzt werden – gib eine Warnung aus, wenn das nicht zutrifft.\r\n- Wenn ein Datum oder Kürzel fehlt oder unklar ist, formuliere einen Hinweis wie [Datum fehlt] oder [Kürzel nicht erkennbar].\r\n\r\n---\r\n\r\n**E-Mail-Text:**\r\n${emailContent}`\r\n            }\r\n          ],\r\n          temperature: 0.7,\r\n          max_tokens: 500\r\n        }),\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId); // Clear the timeout if the request completes\r\n      \r\n      if (!response.ok) {\r\n        let errorMessage = `HTTP error ${response.status}: ${response.statusText}`;\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = `OpenAI API error: ${errorData.error?.message || errorMessage}`;\r\n        } catch (jsonError) {\r\n          // If we can't parse the error as JSON, just use the HTTP error\r\n        }\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Validate the response structure\r\n      if (!data.choices || !data.choices[0] || !data.choices[0].message || !data.choices[0].message.content) {\r\n        throw new Error(\"Invalid response format from OpenAI API\");\r\n      }\r\n      \r\n      return data.choices[0].message.content.trim();\r\n    } catch (fetchError) {\r\n      if (fetchError.name === 'AbortError') {\r\n        throw new Error(\"Request timed out. The server took too long to respond.\");\r\n      }\r\n      throw fetchError;\r\n    } finally {\r\n      clearTimeout(timeoutId); // Ensure the timeout is cleared\r\n    }\r\n  } catch (error) {\r\n    console.error('Error calling OpenAI API:', error);\r\n    \r\n    // Provide more user-friendly error messages\r\n    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\r\n      throw new Error(\"Network error when connecting to OpenAI. Please check your internet connection and try again.\");\r\n    } else if (error.message.includes('401')) {\r\n      throw new Error(\"Invalid API key. Please check your OpenAI API key and try again.\");\r\n    } else if (error.message.includes('429')) {\r\n      throw new Error(\"OpenAI API rate limit exceeded. Please try again later.\");\r\n    } else if (error.message.includes('500')) {\r\n      throw new Error(\"OpenAI server error. Please try again later.\");\r\n    }\r\n    \r\n    throw new Error(`Failed to analyze email: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Stores the OpenAI API key securely\r\n * @param {string} apiKey - The OpenAI API key to store\r\n */\r\nexport function storeApiKey(apiKey) {\r\n  // In a production environment, the API key should be stored securely\r\n  // For demonstration purposes, we're using localStorage, but this is not secure\r\n  // In a real implementation, this should be handled by a server-side component\r\n  \r\n  try {\r\n    // Check if localStorage is available\r\n    if (typeof localStorage === 'undefined') {\r\n      console.warn('localStorage is not available in this environment');\r\n      return false;\r\n    }\r\n    \r\n    // Test localStorage by setting and getting a test value\r\n    const testKey = '_test_localStorage_';\r\n    try {\r\n      localStorage.setItem(testKey, 'test');\r\n      if (localStorage.getItem(testKey) !== 'test') {\r\n        throw new Error('localStorage test failed');\r\n      }\r\n      localStorage.removeItem(testKey);\r\n    } catch (e) {\r\n      console.warn('localStorage is not working properly:', e);\r\n      return false;\r\n    }\r\n    \r\n    // If we got here, localStorage is available and working\r\n    localStorage.setItem('openai_api_key', apiKey);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error storing API key in localStorage:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves the stored OpenAI API key\r\n * @returns {string|null} - The stored API key, or null if not found\r\n */\r\nexport function getApiKey() {\r\n  // In a production environment, the API key should be retrieved securely\r\n  // For demonstration purposes, we're using localStorage, but this is not secure\r\n  // In a real implementation, this should be handled by a server-side component\r\n  \r\n  try {\r\n    // Check if localStorage is available\r\n    if (typeof localStorage === 'undefined') {\r\n      console.warn('localStorage is not available in this environment');\r\n      return null;\r\n    }\r\n    \r\n    return localStorage.getItem('openai_api_key');\r\n  } catch (error) {\r\n    console.error('Error retrieving API key from localStorage:', error);\r\n    return null;\r\n  }\r\n}\r\n","/*\r\n * Utility functions for the Vertretungsanalyse add-in\r\n */\r\n\r\n/**\r\n * Formats a date string to include the weekday abbreviation\r\n * @param {string} dateString - The date string to format (e.g., \"12.05.2025\")\r\n * @returns {string} - The formatted date string with weekday abbreviation (e.g., \"12.05.2025 (Mo)\")\r\n */\r\nexport function formatDateWithWeekday(dateString) {\r\n  try {\r\n    // Parse the date string (assuming German format DD.MM.YYYY)\r\n    const parts = dateString.split('.');\r\n    if (parts.length !== 3) {\r\n      return dateString; // Return original if not in expected format\r\n    }\r\n    \r\n    const day = parseInt(parts[0], 10);\r\n    const month = parseInt(parts[1], 10) - 1; // JavaScript months are 0-indexed\r\n    const year = parseInt(parts[2], 10);\r\n    \r\n    const date = new Date(year, month, day);\r\n    \r\n    // Validate that the date is valid\r\n    if (isNaN(date.getTime())) {\r\n      console.warn(`Invalid date: ${dateString}`);\r\n      return dateString; // Return original if date is invalid\r\n    }\r\n    \r\n    // Get the weekday abbreviation in German\r\n    const weekdays = ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'];\r\n    const weekday = weekdays[date.getDay()];\r\n    \r\n    // Return the formatted date\r\n    return `${dateString} (${weekday})`;\r\n  } catch (error) {\r\n    console.error('Error formatting date:', error);\r\n    return dateString; // Return original on error\r\n  }\r\n}\r\n\r\n/**\r\n * Formats a date range to include weekday abbreviations\r\n * @param {string} dateRange - The date range string (e.g., \"12.05.2025-14.05.2025\")\r\n * @returns {string} - The formatted date range with weekday abbreviations\r\n */\r\nexport function formatDateRangeWithWeekdays(dateRange) {\r\n  try {\r\n    // Check if it's a date range (contains a hyphen)\r\n    if (dateRange.includes('-')) {\r\n      // Validate the format\r\n      const parts = dateRange.split('-');\r\n      if (parts.length !== 2) {\r\n        console.warn(`Invalid date range format: ${dateRange}`);\r\n        return dateRange; // Return original if format is invalid\r\n      }\r\n      \r\n      const [startDate, endDate] = parts;\r\n      // Trim any whitespace that might be present\r\n      const trimmedStartDate = startDate.trim();\r\n      const trimmedEndDate = endDate.trim();\r\n      \r\n      // Format both dates\r\n      return `${formatDateWithWeekday(trimmedStartDate)}-${formatDateWithWeekday(trimmedEndDate)}`;\r\n    }\r\n    \r\n    // If it's not a range, just format the single date\r\n    return formatDateWithWeekday(dateRange);\r\n  } catch (error) {\r\n    console.error('Error formatting date range:', error);\r\n    return dateRange; // Return original on error\r\n  }\r\n}\r\n\r\n/**\r\n * Validates an OpenAI API key format\r\n * @param {string} apiKey - The API key to validate\r\n * @returns {boolean} - Whether the API key format is valid\r\n */\r\nexport function isValidApiKeyFormat(apiKey) {\r\n  // Check if apiKey is a string\r\n  if (typeof apiKey !== 'string') {\r\n    return false;\r\n  }\r\n  \r\n  // Remove any whitespace\r\n  const trimmedKey = apiKey.trim();\r\n  \r\n  // OpenAI API keys typically start with \"sk-\" and are 51 characters long\r\n  // They contain alphanumeric characters and hyphens\r\n  const openAIKeyRegex = /^sk-[A-Za-z0-9]{48}$/;\r\n  \r\n  // Check if it's a valid OpenAI API key format\r\n  if (trimmedKey.startsWith('sk-') && trimmedKey.length >= 48) {\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n/**\r\n * Safely stores a value in Office.context.roamingSettings\r\n * @param {string} key - The key to store\r\n * @param {any} value - The value to store\r\n * @returns {Promise<boolean>} - Whether the operation was successful\r\n */\r\nexport function storeInRoamingSettings(key, value) {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      if (!Office.context || !Office.context.roamingSettings) {\r\n        console.warn('RoamingSettings not available');\r\n        resolve(false);\r\n        return;\r\n      }\r\n      \r\n      // Set the value\r\n      Office.context.roamingSettings.set(key, value);\r\n      \r\n      // Create a timeout to handle cases where saveAsync might hang\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('RoamingSettings saveAsync timed out');\r\n        resolve(false);\r\n      }, 5000); // 5 second timeout\r\n      \r\n      // Save the settings\r\n      Office.context.roamingSettings.saveAsync((result) => {\r\n        clearTimeout(timeoutId);\r\n        \r\n        if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n          resolve(true);\r\n        } else {\r\n          console.error('Error saving to roaming settings:', result.error.message);\r\n          resolve(false);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error storing in roaming settings:', error);\r\n      resolve(false);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Safely retrieves a value from Office.context.roamingSettings\r\n * @param {string} key - The key to retrieve\r\n * @returns {any} - The retrieved value, or null if not found\r\n */\r\nexport function getFromRoamingSettings(key) {\r\n  try {\r\n    // Check if roamingSettings is available\r\n    if (!Office.context || !Office.context.roamingSettings) {\r\n      console.warn('RoamingSettings not available');\r\n      return null;\r\n    }\r\n    \r\n    // Get the value\r\n    const value = Office.context.roamingSettings.get(key);\r\n    \r\n    // Check if the value exists\r\n    if (value === undefined) {\r\n      return null;\r\n    }\r\n    \r\n    return value;\r\n  } catch (error) {\r\n    console.error('Error retrieving from roaming settings:', error);\r\n    return null;\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global document, Office */\r\n\r\nimport { analyzeEmailWithOpenAI, getApiKey, storeApiKey } from '../services/openai-service.js';\r\nimport { formatDateWithWeekday, formatDateRangeWithWeekdays, isValidApiKeyFormat, storeInRoamingSettings, getFromRoamingSettings } from '../helpers/utilities.js';\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Outlook) {\r\n    document.getElementById(\"analyze-button\").onclick = analyzeEmail;\r\n  }\r\n});\r\n\r\n/**\r\n * Analyzes the current email using OpenAI API\r\n */\r\nasync function analyzeEmail() {\r\n  try {\r\n    // Show loading spinner\r\n    document.querySelector(\".ms-progress\").style.display = \"block\";\r\n    document.getElementById(\"analysis-result\").style.display = \"none\";\r\n    document.querySelector(\".ms-MessageBar\").style.display = \"none\";\r\n\r\n    // Get the current email item\r\n    const item = Office.context.mailbox.item;\r\n    \r\n    // Get email body\r\n    const body = await getEmailBody(item);\r\n    \r\n    // Get email headers (subject, from, to, cc)\r\n    const headers = await getEmailHeaders(item);\r\n    \r\n    // Combine headers and body for analysis\r\n    const emailContent = `Subject: ${headers.subject}\\nFrom: ${headers.from}\\nTo: ${headers.to}\\nCC: ${headers.cc || ''}\\n\\n${body}`;\r\n    \r\n    // Call OpenAI API for analysis\r\n    const analysisResult = await callOpenAIAPI(emailContent);\r\n    \r\n    // Display the result\r\n    displayResult(analysisResult);\r\n    \r\n    // Insert the analysis at the top of the email\r\n    await insertAnalysisInEmail(analysisResult);\r\n  } catch (error) {\r\n    showError(error.message);\r\n  } finally {\r\n    // Hide loading spinner\r\n    document.querySelector(\".ms-progress\").style.display = \"none\";\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the email body\r\n * @param {Office.MessageRead} item - The current email item\r\n * @returns {Promise<string>} - The email body\r\n */\r\nfunction getEmailBody(item) {\r\n  return new Promise((resolve, reject) => {\r\n    item.body.getAsync(Office.CoercionType.Text, (result) => {\r\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n        resolve(result.value);\r\n      } else {\r\n        reject(new Error(\"Failed to get email body: \" + result.error.message));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Gets the email headers\r\n * @param {Office.MessageRead} item - The current email item\r\n * @returns {Promise<object>} - The email headers\r\n */\r\nfunction getEmailHeaders(item) {\r\n  try {\r\n    // Safely extract subject\r\n    const subject = item.subject || \"[Kein Betreff]\";\r\n    \r\n    // Safely extract from address\r\n    let fromAddress = \"\";\r\n    if (item.from) {\r\n      try {\r\n        fromAddress = item.from.emailAddress || \"\";\r\n      } catch (e) {\r\n        console.warn(\"Error extracting from address:\", e);\r\n      }\r\n    }\r\n    \r\n    // Safely extract to addresses\r\n    let toAddresses = \"\";\r\n    if (item.to && Array.isArray(item.to)) {\r\n      try {\r\n        toAddresses = item.to\r\n          .filter(recipient => recipient && recipient.emailAddress)\r\n          .map(recipient => recipient.emailAddress)\r\n          .join(\"; \");\r\n      } catch (e) {\r\n        console.warn(\"Error extracting to addresses:\", e);\r\n      }\r\n    }\r\n    \r\n    // Safely extract cc addresses\r\n    let ccAddresses = \"\";\r\n    if (item.cc && Array.isArray(item.cc)) {\r\n      try {\r\n        ccAddresses = item.cc\r\n          .filter(recipient => recipient && recipient.emailAddress)\r\n          .map(recipient => recipient.emailAddress)\r\n          .join(\"; \");\r\n      } catch (e) {\r\n        console.warn(\"Error extracting cc addresses:\", e);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      subject: subject,\r\n      from: fromAddress,\r\n      to: toAddresses,\r\n      cc: ccAddresses\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error getting email headers:\", error);\r\n    // Return default values if there's an error\r\n    return {\r\n      subject: \"[Fehler beim Lesen des Betreffs]\",\r\n      from: \"\",\r\n      to: \"\",\r\n      cc: \"\"\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the OpenAI API key from storage or prompts the user to enter it\r\n * @returns {Promise<string>} - The API key\r\n */\r\nasync function getOrPromptForApiKey() {\r\n  try {\r\n    // First try to get the API key from roaming settings (more reliable in OWA)\r\n    let apiKey = getFromRoamingSettings('openai_api_key');\r\n    \r\n    // If not found in roaming settings, try localStorage (might not work in OWA)\r\n    if (!apiKey) {\r\n      try {\r\n        apiKey = getApiKey();\r\n      } catch (error) {\r\n        console.warn(\"Error accessing localStorage:\", error);\r\n        // Continue with null apiKey, will prompt user below\r\n      }\r\n    }\r\n    \r\n    // If no API key is found, prompt the user to enter it\r\n    if (!apiKey) {\r\n      apiKey = prompt(\"Please enter your OpenAI API key:\");\r\n      \r\n      // Handle case where user cancels the prompt\r\n      if (!apiKey) {\r\n        throw new Error(\"API key is required to analyze emails.\");\r\n      }\r\n      \r\n      // Validate the API key format\r\n      if (!isValidApiKeyFormat(apiKey)) {\r\n        throw new Error(\"Invalid API key format. Please enter a valid OpenAI API key.\");\r\n      }\r\n      \r\n      // Try to store the API key in both places\r\n      try {\r\n        storeApiKey(apiKey);\r\n      } catch (error) {\r\n        console.warn(\"Could not store API key in localStorage:\", error);\r\n        // Continue anyway, we'll still try roaming settings\r\n      }\r\n      \r\n      // Store in roaming settings (returns a Promise)\r\n      storeInRoamingSettings('openai_api_key', apiKey)\r\n        .then(success => {\r\n          if (!success) {\r\n            console.warn(\"Could not store API key in roaming settings\");\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.warn(\"Error storing API key in roaming settings:\", error);\r\n        });\r\n      \r\n      // Even if storage fails, we'll still use the key for this session\r\n    }\r\n    \r\n    return apiKey;\r\n  } catch (error) {\r\n    console.error(\"Error in getOrPromptForApiKey:\", error);\r\n    throw new Error(\"Failed to get API key: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Calls the OpenAI API to analyze the email\r\n * @param {string} emailContent - The email content to analyze\r\n * @returns {Promise<string>} - The analysis result\r\n */\r\nasync function callOpenAIAPI(emailContent) {\r\n  try {\r\n    // Get the API key\r\n    const apiKey = await getOrPromptForApiKey();\r\n    \r\n    // Call the OpenAI API\r\n    let result = await analyzeEmailWithOpenAI(emailContent, apiKey);\r\n    \r\n    // Process the result to add weekday abbreviations to dates\r\n    // This regex looks for date patterns like DD.MM.YYYY\r\n    const datePattern = /\\d{1,2}\\.\\d{1,2}\\.\\d{4}/g;\r\n    const dateRangePattern = /\\d{1,2}\\.\\d{1,2}\\.\\d{4}-\\d{1,2}\\.\\d{1,2}\\.\\d{4}/g;\r\n    \r\n    // First replace date ranges\r\n    result = result.replace(dateRangePattern, match => formatDateRangeWithWeekdays(match));\r\n    \r\n    // Then replace individual dates (that aren't part of ranges)\r\n    result = result.replace(datePattern, match => formatDateWithWeekday(match));\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw new Error(\"Failed to analyze email: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Displays the analysis result in the taskpane\r\n * @param {string} result - The analysis result\r\n */\r\nfunction displayResult(result) {\r\n  const resultElement = document.getElementById(\"analysis-result\");\r\n  resultElement.textContent = result;\r\n  resultElement.style.display = \"block\";\r\n}\r\n\r\n/**\r\n * Inserts the analysis at the top of the email\r\n * @param {string} analysis - The analysis result\r\n */\r\nasync function insertAnalysisInEmail(analysis) {\r\n  // Note: In Outlook Add-ins, modifying the content of an email directly is limited\r\n  // This is a simplified approach that may not work in all scenarios\r\n  // A more robust solution would involve creating a custom property or using other Outlook APIs\r\n  \r\n  try {\r\n    // Get the current item\r\n    const item = Office.context.mailbox.item;\r\n    \r\n    // Create a formatted analysis block with the requested styling\r\n    const formattedAnalysis = `\r\n<div style=\"font-family: Arial, sans-serif; font-weight: bold; color: #00008B; margin-bottom: 20px; padding: 10px; border: 1px solid #ccc; border-radius: 4px;\">\r\n${analysis.replace(/\\n/g, '<br>')}\r\n</div>\r\n<hr>\r\n`;\r\n    \r\n    // Set a custom property to indicate that we've analyzed this email\r\n    // This could be used in a production scenario to avoid duplicate analyses\r\n    item.loadCustomPropertiesAsync(function(result) {\r\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n        try {\r\n          const props = result.value;\r\n          props.set(\"vertretungsanalyse_processed\", true);\r\n          props.set(\"vertretungsanalyse_result\", analysis);\r\n          \r\n          // Add error handling for saveAsync\r\n          props.saveAsync(function(saveResult) {\r\n            if (saveResult.status !== Office.AsyncResultStatus.Succeeded) {\r\n              console.error(\"Error saving custom properties:\", saveResult.error.message);\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(\"Error setting custom properties:\", error);\r\n        }\r\n      } else {\r\n        console.error(\"Error loading custom properties:\", result.error.message);\r\n      }\r\n    });\r\n    \r\n    // In a real implementation, you would need to use appropriate Outlook APIs\r\n    // to modify the email content, which might require different approaches\r\n    // depending on the Outlook version and context\r\n    \r\n    console.log(\"Analysis would be inserted at the top of the email:\", analysis);\r\n    \r\n    // Show a success message in the taskpane\r\n    const messageBar = document.querySelector(\".ms-MessageBar\");\r\n    messageBar.classList.remove(\"ms-MessageBar--error\");\r\n    messageBar.classList.add(\"ms-MessageBar--success\");\r\n    messageBar.querySelector(\".ms-MessageBar-text\").textContent = \r\n      \"Analyse wurde erfolgreich durchgeführt. In einer vollständigen Implementierung würde diese Analyse am Anfang der E-Mail eingefügt werden.\";\r\n    messageBar.style.display = \"block\";\r\n  } catch (error) {\r\n    showError(\"Failed to insert analysis in email: \" + error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Shows an error message\r\n * @param {string} message - The error message\r\n */\r\nfunction showError(message) {\r\n  const messageBar = document.querySelector(\".ms-MessageBar\");\r\n  messageBar.classList.remove(\"ms-MessageBar--success\");\r\n  messageBar.classList.add(\"ms-MessageBar--error\");\r\n  messageBar.querySelector(\".ms-MessageBar-text\").textContent = message;\r\n  messageBar.style.display = \"block\";\r\n}\r\n"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","delegateYield","asyncGeneratorStep","analyzeEmailWithOpenAI","_x","_x2","_analyzeEmailWithOpenAI","apply","arguments","_callee","emailContent","apiKey","controller","timeoutId","response","errorMessage","_errorData$error","errorData","data","_context","navigator","onLine","AbortController","setTimeout","abort","fetch","headers","concat","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","signal","clearTimeout","ok","status","statusText","json","error","message","t0","choices","trim","t1","t2","console","includes","_next","_throw","storeApiKey","localStorage","warn","testKey","setItem","getItem","removeItem","getApiKey","formatDateWithWeekday","dateString","parts","split","day","parseInt","month","year","date","Date","getTime","weekday","getDay","formatDateRangeWithWeekdays","dateRange","_parts","startDate","endDate","trimmedStartDate","trimmedEndDate","isValidApiKeyFormat","trimmedKey","startsWith","storeInRoamingSettings","key","Office","context","roamingSettings","set","saveAsync","result","AsyncResultStatus","Succeeded","getFromRoamingSettings","get","undefined","_asyncToGenerator","analyzeEmail","_analyzeEmail","item","analysisResult","document","querySelector","style","display","getElementById","mailbox","getEmailBody","getEmailHeaders","subject","from","to","cc","callOpenAIAPI","resultElement","textContent","insertAnalysisInEmail","showError","reject","getAsync","CoercionType","Text","fromAddress","emailAddress","toAddresses","Array","isArray","filter","recipient","map","join","ccAddresses","getOrPromptForApiKey","_getOrPromptForApiKey","_callee2","_context2","prompt","success","_callOpenAIAPI","_callee3","datePattern","dateRangePattern","_context3","replace","match","_insertAnalysisInEmail","_callee4","analysis","messageBar","_context4","loadCustomPropertiesAsync","props","saveResult","log","classList","remove","add","onReady","info","host","HostType","Outlook","onclick"],"sourceRoot":""}